version: "3.7"
services: 
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.10.3
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - "ES_JAVA_OPTS=-Xms4600m -Xmx4600m"
        ports:
            - 9200:9200
            - 9300:9300
        volumes:
            - esdata:/usr/share/elasticsearch/data
        networks:
            - mongors-network
        mem_limit: "5000M"
    kibana:
        image: docker.elastic.co/kibana/kibana:8.10.3
        ports:
            - "5601:5601"
        networks:
            - mongors-network
        environment:
            XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: "a454989cedc03123102a5d7b6cd0d11d"
            XPACK_REPORTING_ENCRYPTIONKEY: "2f9a939c253958d38710db1b59f09348"
            XPACK_SECURITY_ENCRYPTIONKEY: "ef1435c75010e03cd74ebc6a281f3e5b"
            XPACK_FLEET_AGENTS_FLEET_SERVER_HOSTS: "[\"http://fleet-server:8220\"]"
        depends_on:
            - elasticsearch
    apm-server:
      image: docker.elastic.co/apm/apm-server:8.13.1
      environment:
        OUTPUT_ELASTICSEARCH_ENABLED: "true"
        ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      ports:
        - "8200:8200"
      networks:
        - mongors-network
    mongosetup:
        container_name: mongosetup
        image: mongo:7.0
        depends_on:
          - mongo1
          - mongo2
          - mongo3
        restart: "no"
        networks:
          - mongors-network
        volumes:
          - ./init.sh:/init.sh
          - ./setup.sh:/setup.sh
        environment:
          DB: modelDb
        entrypoint: [ "bash", "-c", "sh ./setup.sh"]
    mongo1:
        container_name: mongo1
        image: mongo:7.0
        volumes:
          - mongors:/data/db
        networks:
          - mongors-network
        ports:
          - 27021:27017
        links:
          - mongo2
          - mongo3
        depends_on:
            - mongo2
            - mongo3
        entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
    mongo2:
        container_name: mongo2
        image: mongo:7.0
        volumes:
          - mongors2:/data/db
        networks:
          - mongors-network
        ports:
          - 27017
        entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
    mongo3:
        container_name: mongo3
        image: mongo:7.0
        volumes:
          - mongors3:/data/db
        networks:
          - mongors-network
        ports:
          - 27017
        entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]    
    redis:
        container_name: basic-redis-chat
        image: redis    
        restart: always
        command: redis-server --appendonly yes --requirepass 123456    
        ports:
          - "6379:6379"
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
          - "3000:3000"
        networks:
          - mongors-network    
    prometheus:
        image: prom/prometheus
        container_name: prometheus
        ports:
          - "9090:9090"
        networks:
          - mongors-network    
        volumes:
          - ./prometheus:/etc/prometheus
        command:
          - '--config.file=/etc/prometheus/prometheus.yml' 
    fleet-server:
      image: "docker.elastic.co/beats/elastic-agent:${stackVersion:-8.0.0-SNAPSHOT}"
      networks:
        - mongors-network  
      environment:
        - "FLEET_SERVER_ENABLE=1"
        - "FLEET_SERVER_INSECURE_HTTP=1"
        - "KIBANA_FLEET_SETUP=1"
        - "KIBANA_FLEET_HOST=http://kibana:5601"
        - "FLEET_SERVER_HOST=0.0.0.0"
        - "FLEET_SERVER_PORT=8220"
volumes:
    esdata:
        driver: local
    mongors:
    mongors2:
    mongors3:
networks:
  mongors-network:
    driver: bridge